{"ast":null,"code":"import './commands';\nimport { mount } from 'cypress/react18';\nCypress.Commands.add('mount', mount);","map":{"version":3,"names":["mount","Cypress","Commands","add"],"sources":["C:/Users/colin/Desktop/react-native-cascading-styles/cypress/support/component.ts"],"sourcesContent":["// ***********************************************************\r\n// This example support/component.ts is processed and\r\n// loaded automatically before your test files.\r\n//\r\n// This is a great place to put global configuration and\r\n// behavior that modifies Cypress.\r\n//\r\n// You can change the location of this file or turn off\r\n// automatically serving support files with the\r\n// 'supportFile' configuration option.\r\n//\r\n// You can read more here:\r\n// https://on.cypress.io/configuration\r\n// ***********************************************************\r\n\r\n// Import commands.js using ES2015 syntax:\r\nimport './commands'\r\n\r\n// Alternatively you can use CommonJS syntax:\r\n// require('./commands')\r\n\r\nimport { mount } from 'cypress/react18'\r\n\r\n// Augment the Cypress namespace to include type definitions for\r\n// your custom command.\r\n// Alternatively, can be defined in cypress/support/component.d.ts\r\n// with a <reference path=\"./component\" /> at the top of your spec.\r\ndeclare global {\r\n  namespace Cypress {\r\n    interface Chainable {\r\n      mount: typeof mount\r\n    }\r\n  }\r\n}\r\n\r\nCypress.Commands.add('mount', mount)\r\n\r\n// Example use:\r\n// cy.mount(<MyComponent />)"],"mappings":"AAgBA,OAAO,YAAY;AAKnB,SAASA,KAAK,QAAQ,iBAAiB;AAcvCC,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,OAAO,EAAEH,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}